# -*- coding: utf-8 -*-
"""BIP Technical.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h-E4X9x65TU1hxrSPBTFf2Ilx7nrOZol
"""

import numpy as np
import pandas as pd

"""# Brute Force Algorithm

To find the maximum sum of a contiguous subarray the naive approach is to try to sum every combinations of subarrays that exists in the array. *However this algorithm has a $O(n^3)$ complexity*
"""

def max_subarray(n):
  """
  max_subarray returns the maximum sum of a contiguous subarray in array n

  Parameters:
  n : input array
  :return: tuple(maximum sum, contiguos subarray)

  """
  if isinstance(n,(list,np.ndarray)) != True:
    raise Exception('Please enter a list or an array')

  else:

    max_sum = float('-inf')
    max_array = None

    for i in range(len(n)):
      for j in range(i+1,len(n)+1):
        if sum(n[i:j]) > max_sum:
          max_sum = sum(n[i:j])
          max_array = n[i:j]
    
    return (max_sum,max_array)

"""# Kadane’s Algorithm

Kadane´s Algorithm is the dynamic programming algorithm proposed to solve this particular problem. The time complexity of this algorithm is O(n), which makes it of linear complexity.
"""

def kadanes(n):
  """
  function kadanes applies the Kadane´s algorithm to find the maximum sum of a contiguous subarray in array n

  Parameters:
  n : input array
  :return: tuple(maximum sum, contiguos subarray)

  """
  if isinstance(n,(list,np.ndarray)) != True:
    raise Exception("Please enter a list or an array")
  
  else:
    global_max = n[0]
    max_ending = n[0]
    starting_point = 0
    ending_point = 0

    for i in range(1,len(n)):

      if max_ending + n[i] > n[i]:
        max_ending = max_ending +n[i]
      else:
        max_ending = n[i]
        starting_point = i

      if max_ending >global_max:
        global_max = max_ending
        ending_point = i
      else:
        pass
        
  return (global_max,n[starting_point:ending_point+1])

"""# Unit Test"""

import unittest

class TestAlgorithms(unittest.TestCase):
    def test_bruteforce_success(self):
      actual = max_subarray(n=[354,5,67,-2,4,-400])
      expected = (428, [354, 5, 67, -2,4])
      self.assertEqual(actual, expected)
    
    def test_bruteforce_fail(self):
      array = 'string'
      with self.assertRaises(Exception) as exception_context:
        max_subarray(n=array)
      self.assertEqual(
          str(exception_context.exception),
          'Please enter a list or an array')
    
    def test_kadanes(self):
      actual = max_subarray(n=[2,10,-20,100,-400])
      expected = (100, [100])
      self.assertEqual(actual, expected)

    def test_kadanes_fail(self):
      array = 'string'
      with self.assertRaises(Exception) as exception_context:
        max_subarray(n=array)
      self.assertEqual(
          str(exception_context.exception),
          'Please enter a list or an array')

unittest.main(argv=[''], verbosity=2, exit=False)